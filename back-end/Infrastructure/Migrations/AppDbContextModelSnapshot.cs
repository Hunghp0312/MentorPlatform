// <auto-generated />
using System;
using Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description = "Courses related to software development and programming languages.",
                            Name = "Programming",
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Description = "Frontend and backend development tutorials and courses.",
                            Name = "Web Development",
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Description = "Learn data analysis, visualization, and machine learning.",
                            Name = "Data Science",
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Description = "Courses on CI/CD, containers, and infrastructure automation.",
                            Name = "DevOps",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Description = "Introduction to relational and non-relational databases.",
                            Name = "Databases",
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            Description = "Courses on HTML, CSS, JavaScript and modern frameworks.",
                            Name = "Frontend",
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Description = "Learn backend technologies and server-side programming.",
                            Name = "Backend",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Description = "Build apps for iOS and Android platforms.",
                            Name = "Mobile Development",
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Description = "Explore AWS, Azure, GCP and cloud infrastructure.",
                            Name = "Cloud Computing",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Description = "Understand security principles and ethical hacking.",
                            Name = "Cybersecurity",
                            StatusId = 2
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LevelId");

                    b.HasIndex("StatusId");

                    b.ToTable("Course", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72848"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Learn the fundamentals of C#.",
                            Duration = "3 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 1,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000001"),
                            StatusId = 2,
                            Tags = "C#,programming,fundamentals",
                            Title = "Intro to C#"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72847"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Master object-oriented programming concepts in C#.",
                            Duration = "4 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 2,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000002"),
                            StatusId = 2,
                            Tags = "C#,OOP,classes,inheritance",
                            Title = "OOP in C#"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72846"),
                            CategoryId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Build and deploy RESTful APIs using ASP.NET Core.",
                            Duration = "5 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 3,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000003"),
                            StatusId = 2,
                            Tags = ".NET,ASP.NET Core,API,REST",
                            Title = "Advanced .NET APIs"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72845"),
                            CategoryId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Understand SQL basics and database querying.",
                            Duration = "2 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 1,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000004"),
                            StatusId = 2,
                            Tags = "SQL,database,queries,beginner",
                            Title = "SQL for Beginners"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72844"),
                            CategoryId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Master Entity Framework Core for modern data access.",
                            Duration = "4 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 2,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000005"),
                            StatusId = 2,
                            Tags = "EF Core,Entity Framework,data access,.NET",
                            Title = "EF Core Masterclass"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72843"),
                            CategoryId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Create beautiful static websites using HTML and CSS.",
                            Duration = "2 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 1,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000006"),
                            StatusId = 2,
                            Tags = "HTML,CSS,web design,frontend",
                            Title = "HTML & CSS Basics"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72842"),
                            CategoryId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Learn how to build reactive UIs using React.",
                            Duration = "4 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 2,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000007"),
                            StatusId = 2,
                            Tags = "React,JavaScript,frontend,UI",
                            Title = "React Essentials"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72841"),
                            CategoryId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Write unit tests and follow TDD in .NET.",
                            Duration = "3 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 2,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000008"),
                            StatusId = 2,
                            Tags = ".NET,testing,TDD,unit tests",
                            Title = "Unit Testing in .NET"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72840"),
                            CategoryId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Master version control with Git and GitHub.",
                            Duration = "1 week",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 1,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000009"),
                            StatusId = 2,
                            Tags = "Git,GitHub,version control,beginner",
                            Title = "Git & GitHub Basics"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72849"),
                            CategoryId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Containerize and deploy apps with Docker.",
                            Duration = "3 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 3,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000010"),
                            StatusId = 2,
                            Tags = "Docker,containers,devops,deployment",
                            Title = "Docker for Developers"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.CategoryStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CategoryStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Inactive"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Active"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.CourseLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CourseLevel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Beginner"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Intermediate"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Advanced"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.CourseStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CourseStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Draft"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Published"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Archived"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Category", b =>
                {
                    b.HasOne("Infrastructure.Entities.Enum.CategoryStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Infrastructure.Entities.Course", b =>
                {
                    b.HasOne("Infrastructure.Entities.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Enum.CourseLevel", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Enum.CourseStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Level");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Infrastructure.Entities.Category", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
