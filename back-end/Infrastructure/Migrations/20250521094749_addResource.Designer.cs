// <auto-generated />
using System;
using Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250521094749_addResource")]
    partial class addResource
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Entities.ArenaOfExpertise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ArenaOfExpertise");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0a0b0c0-d0e0-f0a0-b0c0-d0e0f0a0b0c1"),
                            Name = "Leadership"
                        },
                        new
                        {
                            Id = new Guid("e0a0b0c0-d0e0-f0a0-b0c0-d0e0f0a0b0c2"),
                            Name = "Programming"
                        },
                        new
                        {
                            Id = new Guid("e0a0b0c0-d0e0-f0a0-b0c0-d0e0f0a0b0c3"),
                            Name = "Design"
                        },
                        new
                        {
                            Id = new Guid("e0a0b0c0-d0e0-f0a0-b0c0-d0e0f0a0b0c4"),
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = new Guid("e0a0b0c0-d0e0-f0a0-b0c0-d0e0f0a0b0c5"),
                            Name = "Data Science"
                        },
                        new
                        {
                            Id = new Guid("e0a0b0c0-d0e0-f0a0-b0c0-d0e0f0a0b0c6"),
                            Name = "Business"
                        },
                        new
                        {
                            Id = new Guid("e0a0b0c0-d0e0-f0a0-b0c0-d0e0f0a0b0c7"),
                            Name = "Project Management"
                        },
                        new
                        {
                            Id = new Guid("e0a0b0c0-d0e0-f0a0-b0c0-d0e0f0a0b0c8"),
                            Name = "Communication"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description = "Courses related to software development and programming languages.",
                            Name = "Programming",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Description = "Frontend and backend development tutorials and courses.",
                            Name = "Web Development",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Description = "Learn data analysis, visualization, and machine learning.",
                            Name = "Data Science",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Description = "Courses on CI/CD, containers, and infrastructure automation.",
                            Name = "DevOps",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Description = "Introduction to relational and non-relational databases.",
                            Name = "Databases",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            Description = "Courses on HTML, CSS, JavaScript and modern frameworks.",
                            Name = "Frontend",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Description = "Learn backend technologies and server-side programming.",
                            Name = "Backend",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Description = "Build apps for iOS and Android platforms.",
                            Name = "Mobile Development",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Description = "Explore AWS, Azure, GCP and cloud infrastructure.",
                            Name = "Cloud Computing",
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Description = "Understand security principles and ethical hacking.",
                            Name = "Cybersecurity",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LevelId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Course", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72848"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Learn the fundamentals of C#.",
                            Duration = "3 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 1,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Name = "Intro to C#",
                            StatusId = 2,
                            Tags = "C#,programming,fundamentals"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72847"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Master object-oriented programming concepts in C#.",
                            Duration = "4 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 2,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Name = "OOP in C#",
                            StatusId = 1,
                            Tags = "C#,OOP,classes,inheritance"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72846"),
                            CategoryId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Build and deploy RESTful APIs using ASP.NET Core.",
                            Duration = "5 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 3,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Name = "Advanced .NET APIs",
                            StatusId = 2,
                            Tags = ".NET,ASP.NET Core,API,REST"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72845"),
                            CategoryId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Understand SQL basics and database querying.",
                            Duration = "2 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 1,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Name = "SQL for Beginners",
                            StatusId = 3,
                            Tags = "SQL,database,queries,beginner"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72844"),
                            CategoryId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Master Entity Framework Core for modern data access.",
                            Duration = "4 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 2,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000005"),
                            Name = "EF Core Masterclass",
                            StatusId = 2,
                            Tags = "EF Core,Entity Framework,data access,.NET"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72843"),
                            CategoryId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Create beautiful static websites using HTML and CSS.",
                            Duration = "2 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 1,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000006"),
                            Name = "HTML & CSS Basics",
                            StatusId = 1,
                            Tags = "HTML,CSS,web design,frontend"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72842"),
                            CategoryId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Learn how to build reactive UIs using React.",
                            Duration = "4 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 2,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000007"),
                            Name = "React Essentials",
                            StatusId = 2,
                            Tags = "React,JavaScript,frontend,UI"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72841"),
                            CategoryId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Write unit tests and follow TDD in .NET.",
                            Duration = "3 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 2,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000008"),
                            Name = "Unit Testing in .NET",
                            StatusId = 2,
                            Tags = ".NET,testing,TDD,unit tests"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72840"),
                            CategoryId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Master version control with Git and GitHub.",
                            Duration = "1 week",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 1,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000009"),
                            Name = "Git & GitHub Basics",
                            StatusId = 3,
                            Tags = "Git,GitHub,version control,beginner"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72849"),
                            CategoryId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Containerize and deploy apps with Docker.",
                            Duration = "3 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 3,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000010"),
                            Name = "Docker for Developers",
                            StatusId = 1,
                            Tags = "Docker,containers,devops,deployment"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.ApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Approved"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.CategoryStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CategoryStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Inactive"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Active"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.CourseLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CourseLevel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Beginner"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Intermediate"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Advanced"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.CourseStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CourseStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Draft"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Published"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Archived"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AdminReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("LastStatusUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MotivationStatement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminReviewerId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ApplicationStatusId");

                    b.ToTable("MentorApplication");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorCertification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertificationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CredentialUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IssuingOrganization")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("MentorApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MentorApplicationId");

                    b.ToTable("MentorCertification");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("GraduationYear")
                        .HasColumnType("int");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("MentorApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MentorApplicationId");

                    b.ToTable("MentorEducation");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorWorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MentorApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MentorApplicationId");

                    b.ToTable("MentorWorkExperience");
                });

            modelBuilder.Entity("Infrastructure.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("ResourceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("Infrastructure.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Learner"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mentor"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.SupportingDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("MentorApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("MentorApplicationId");

                    b.HasIndex("ResourceId");

                    b.ToTable("SupportingDocument");
                });

            modelBuilder.Entity("Infrastructure.Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Topic");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0b1c2d3-e4f5-a6b7-c8d9-e0f1a2b3c4d1"),
                            Name = "Career Development"
                        },
                        new
                        {
                            Id = new Guid("f0b1c2d3-e4f5-a6b7-c8d9-e0f1a2b3c4d2"),
                            Name = "Technical Skills"
                        },
                        new
                        {
                            Id = new Guid("f0b1c2d3-e4f5-a6b7-c8d9-e0f1a2b3c4d3"),
                            Name = "Leadership"
                        },
                        new
                        {
                            Id = new Guid("f0b1c2d3-e4f5-a6b7-c8d9-e0f1a2b3c4d4"),
                            Name = "Communication"
                        },
                        new
                        {
                            Id = new Guid("f0b1c2d3-e4f5-a6b7-c8d9-e0f1a2b3c4d5"),
                            Name = "Work-Life Balance"
                        },
                        new
                        {
                            Id = new Guid("f0b1c2d3-e4f5-a6b7-c8d9-e0f1a2b3c4d6"),
                            Name = "Industry Insights"
                        },
                        new
                        {
                            Id = new Guid("f0b1c2d3-e4f5-a6b7-c8d9-e0f1a2b3c4d7"),
                            Name = "Networking"
                        },
                        new
                        {
                            Id = new Guid("f0b1c2d3-e4f5-a6b7-c8d9-e0f1a2b3c4d8"),
                            Name = "Entrepreneurship"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("PasswordResetExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserArenaOfExpertise", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArenaOfExpertiseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ArenaOfExpertiseId");

                    b.HasIndex("ArenaOfExpertiseId");

                    b.ToTable("UserArenaOfExpertise");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AvailabilityData")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("CommunicationMethod")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IndustryExperience")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("LearningStyle")
                        .HasColumnType("int");

                    b.Property<bool>("MessagePermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("NotificationsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<byte[]>("PhotoData")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("PrivacyProfile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ProfessionalSkill")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("SessionDuration")
                        .HasColumnType("int");

                    b.Property<int?>("SessionFrequency")
                        .HasColumnType("int");

                    b.Property<int?>("TeachingApproach")
                        .HasColumnType("int");

                    b.Property<string>("UserGoal")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserTopicOfInterest", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("UserTopicOfInterest");
                });

            modelBuilder.Entity("Infrastructure.Entities.Category", b =>
                {
                    b.HasOne("Infrastructure.Entities.Enum.CategoryStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Infrastructure.Entities.Course", b =>
                {
                    b.HasOne("Infrastructure.Entities.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Enum.CourseLevel", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Enum.CourseStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.User", null)
                        .WithMany("MentoredCourses")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("Level");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorApplication", b =>
                {
                    b.HasOne("Infrastructure.Entities.User", "AdminReviewer")
                        .WithMany("ReviewedMentorApplications")
                        .HasForeignKey("AdminReviewerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infrastructure.Entities.User", "Applicant")
                        .WithMany("SubmittedMentorApplications")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Enum.ApplicationStatus", "ApplicationStatus")
                        .WithMany("MentorApplications")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdminReviewer");

                    b.Navigation("Applicant");

                    b.Navigation("ApplicationStatus");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorCertification", b =>
                {
                    b.HasOne("Infrastructure.Entities.MentorApplication", "MentorApplication")
                        .WithMany("MentorCertifications")
                        .HasForeignKey("MentorApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentorApplication");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorEducation", b =>
                {
                    b.HasOne("Infrastructure.Entities.MentorApplication", "MentorApplication")
                        .WithMany("MentorEducations")
                        .HasForeignKey("MentorApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentorApplication");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorWorkExperience", b =>
                {
                    b.HasOne("Infrastructure.Entities.MentorApplication", "MentorApplication")
                        .WithMany("MentorWorkExperiences")
                        .HasForeignKey("MentorApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentorApplication");
                });

            modelBuilder.Entity("Infrastructure.Entities.Resource", b =>
                {
                    b.HasOne("Infrastructure.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Infrastructure.Entities.SupportingDocument", b =>
                {
                    b.HasOne("Infrastructure.Entities.MentorApplication", "MentorApplication")
                        .WithMany("SupportingDocuments")
                        .HasForeignKey("MentorApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Infrastructure.Entities.Resource", "Resource")
                        .WithMany("SupportingDocuments")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MentorApplication");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Infrastructure.Entities.User", b =>
                {
                    b.HasOne("Infrastructure.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserArenaOfExpertise", b =>
                {
                    b.HasOne("Infrastructure.Entities.ArenaOfExpertise", "ArenaOfExpertise")
                        .WithMany("UserArenaOfExpertises")
                        .HasForeignKey("ArenaOfExpertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.User", "User")
                        .WithMany("UserArenaOfExpertises")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArenaOfExpertise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserProfile", b =>
                {
                    b.HasOne("Infrastructure.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Infrastructure.Entities.UserProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserTopicOfInterest", b =>
                {
                    b.HasOne("Infrastructure.Entities.Topic", "Topic")
                        .WithMany("UserTopicOfInterests")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.User", "User")
                        .WithMany("UserTopicOfInterests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Entities.ArenaOfExpertise", b =>
                {
                    b.Navigation("UserArenaOfExpertises");
                });

            modelBuilder.Entity("Infrastructure.Entities.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.ApplicationStatus", b =>
                {
                    b.Navigation("MentorApplications");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorApplication", b =>
                {
                    b.Navigation("MentorCertifications");

                    b.Navigation("MentorEducations");

                    b.Navigation("MentorWorkExperiences");

                    b.Navigation("SupportingDocuments");
                });

            modelBuilder.Entity("Infrastructure.Entities.Resource", b =>
                {
                    b.Navigation("SupportingDocuments");
                });

            modelBuilder.Entity("Infrastructure.Entities.Topic", b =>
                {
                    b.Navigation("UserTopicOfInterests");
                });

            modelBuilder.Entity("Infrastructure.Entities.User", b =>
                {
                    b.Navigation("MentoredCourses");

                    b.Navigation("ReviewedMentorApplications");

                    b.Navigation("SubmittedMentorApplications");

                    b.Navigation("UserArenaOfExpertises");

                    b.Navigation("UserProfile");

                    b.Navigation("UserTopicOfInterests");
                });
#pragma warning restore 612, 618
        }
    }
}
