// <auto-generated />
using System;
using Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250530052318_InitialSchema2")]
    partial class InitialSchema2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description = "Courses related to software development and programming languages.",
                            Name = "Programming",
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Description = "Frontend and backend development tutorials and courses.",
                            Name = "Web Development",
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Description = "Learn data analysis, visualization, and machine learning.",
                            Name = "Data Science",
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Description = "Courses on CI/CD, containers, and infrastructure automation.",
                            Name = "DevOps",
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Description = "Introduction to relational and non-relational databases.",
                            Name = "Databases",
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            Description = "Courses on HTML, CSS, JavaScript and modern frameworks.",
                            Name = "Frontend",
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Description = "Learn backend technologies and server-side programming.",
                            Name = "Backend",
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Description = "Build apps for iOS and Android platforms.",
                            Name = "Mobile Development",
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Description = "Explore AWS, Azure, GCP and cloud infrastructure.",
                            Name = "Cloud Computing",
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Description = "Understand security principles and ethical hacking.",
                            Name = "Cybersecurity",
                            StatusId = 2
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LevelId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Course", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72848"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Learn the fundamentals of C#.",
                            Duration = "3 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 1,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Name = "Intro to C#",
                            StatusId = 2,
                            Tags = "C#,programming,fundamentals"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72847"),
                            CategoryId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Master object-oriented programming concepts in C#.",
                            Duration = "4 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 2,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Name = "OOP in C#",
                            StatusId = 1,
                            Tags = "C#,OOP,classes,inheritance"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72846"),
                            CategoryId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Build and deploy RESTful APIs using ASP.NET Core.",
                            Duration = "5 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 3,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000003"),
                            Name = "Advanced .NET APIs",
                            StatusId = 2,
                            Tags = ".NET,ASP.NET Core,API,REST"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72845"),
                            CategoryId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Understand SQL basics and database querying.",
                            Duration = "2 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 1,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000004"),
                            Name = "SQL for Beginners",
                            StatusId = 3,
                            Tags = "SQL,database,queries,beginner"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72844"),
                            CategoryId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Master Entity Framework Core for modern data access.",
                            Duration = "4 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 2,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000005"),
                            Name = "EF Core Masterclass",
                            StatusId = 2,
                            Tags = "EF Core,Entity Framework,data access,.NET"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72843"),
                            CategoryId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Create beautiful static websites using HTML and CSS.",
                            Duration = "2 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 1,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000006"),
                            Name = "HTML & CSS Basics",
                            StatusId = 1,
                            Tags = "HTML,CSS,web design,frontend"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72842"),
                            CategoryId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Learn how to build reactive UIs using React.",
                            Duration = "4 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 2,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000007"),
                            Name = "React Essentials",
                            StatusId = 2,
                            Tags = "React,JavaScript,frontend,UI"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72841"),
                            CategoryId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Write unit tests and follow TDD in .NET.",
                            Duration = "3 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 2,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000008"),
                            Name = "Unit Testing in .NET",
                            StatusId = 2,
                            Tags = ".NET,testing,TDD,unit tests"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72840"),
                            CategoryId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Master version control with Git and GitHub.",
                            Duration = "1 week",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 1,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000009"),
                            Name = "Git & GitHub Basics",
                            StatusId = 3,
                            Tags = "Git,GitHub,version control,beginner"
                        },
                        new
                        {
                            Id = new Guid("8d02b327-6370-41c7-95bb-6a8d72b72849"),
                            CategoryId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Created = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Containerize and deploy apps with Docker.",
                            Duration = "3 weeks",
                            LastUpdated = new DateTime(2025, 5, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            LevelId = 3,
                            MentorId = new Guid("10000000-0000-0000-0000-000000000010"),
                            Name = "Docker for Developers",
                            StatusId = 1,
                            Tags = "Docker,containers,devops,deployment"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.DocumentContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentContent");
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.ApplicationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Request Info"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Submited"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Under Review"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.AreaOfExpertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AreaOfExpertise");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Leadership"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Programming"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Design"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Data Science"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Business"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Project Management"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Communication"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Availability");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Weekdays"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Weekends"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mornings"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Afternoons"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Evenings"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.CategoryStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CategoryStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Inactive"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Active"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.CommunicationMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CommunicationMethod", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Video Call"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Audio Call"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Text Chat"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.CourseLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CourseLevel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Beginner"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Intermediate"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Advanced"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.CourseStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CourseStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Draft"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Published"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Archived"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.LearningStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("LearningStyle", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Visual"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Auditory"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Reading/Writing"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kinesthetic"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.SessionAvailabilityStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SessionAvailabilityStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Available"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.SessionBookingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SessionBookingStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Declined"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.SessionDuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SessionDuration", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "30 minutes"
                        },
                        new
                        {
                            Id = 2,
                            Name = "45 minutes"
                        },
                        new
                        {
                            Id = 3,
                            Name = "1 hour"
                        },
                        new
                        {
                            Id = 4,
                            Name = "1.5 hours"
                        },
                        new
                        {
                            Id = 5,
                            Name = "2 hours"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.SessionFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SessionFrequency", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Weekly"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Every two weeks"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Monthly"
                        },
                        new
                        {
                            Id = 4,
                            Name = "As needed"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.SessionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SessionType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Virtual Session"
                        },
                        new
                        {
                            Id = 2,
                            Name = "In-Person Session"
                        },
                        new
                        {
                            Id = 3,
                            Name = "On-Site Session"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.TeachingApproach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TeachingApproach");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Hands-on Practice"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Project Based"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Disscussion Based"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Lecture Style"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Topic");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Career Development"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Technical Skills"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Leadership"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Communication"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Work-Life Balance"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Industry Insights"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Networking"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Entrepreneurship"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.UserStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Deactivated"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorApplication", b =>
                {
                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AdminReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("LastStatusUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestInfoDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmissionDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ApplicantId");

                    b.HasIndex("AdminReviewerId")
                        .IsUnique()
                        .HasFilter("[AdminReviewerId] IS NOT NULL");

                    b.HasIndex("ApplicationStatusId");

                    b.ToTable("MentorApplication");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorAvailabilitySlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.HasIndex("StatusId");

                    b.ToTable("MentorAvailabilitySlot");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da331a4b-3665-4d78-99a6-825da4015e76"),
                            EndTime = new DateTime(2025, 6, 2, 10, 0, 0, 0, DateTimeKind.Utc),
                            MentorId = new Guid("03ea823d-d625-448d-901d-411c5028b769"),
                            StartTime = new DateTime(2025, 6, 2, 9, 0, 0, 0, DateTimeKind.Utc),
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("4a6e7525-23e4-4d6f-930b-22f2e40783d9"),
                            EndTime = new DateTime(2025, 6, 2, 11, 0, 0, 0, DateTimeKind.Utc),
                            MentorId = new Guid("03ea823d-d625-448d-901d-411c5028b769"),
                            StartTime = new DateTime(2025, 6, 2, 10, 0, 0, 0, DateTimeKind.Utc),
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("f4e2b81e-479a-4b6a-8a4d-08d3e4c8a6b0"),
                            EndTime = new DateTime(2025, 6, 3, 15, 0, 0, 0, DateTimeKind.Utc),
                            MentorId = new Guid("03ea823d-d625-448d-901d-411c5028b769"),
                            StartTime = new DateTime(2025, 6, 3, 14, 0, 0, 0, DateTimeKind.Utc),
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("1c7b9f0e-9c3a-4b8f-8e6a-1b9e7b1a3b0f"),
                            EndTime = new DateTime(2025, 6, 5, 20, 0, 0, 0, DateTimeKind.Utc),
                            MentorId = new Guid("862b702e-2c59-46f7-8c06-5349d769e237"),
                            StartTime = new DateTime(2025, 6, 5, 19, 0, 0, 0, DateTimeKind.Utc),
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("9e8d7c6b-5a4b-3c2d-1e0f-a9b8c7d6e5f4"),
                            EndTime = new DateTime(2025, 6, 7, 11, 0, 0, 0, DateTimeKind.Utc),
                            MentorId = new Guid("862b702e-2c59-46f7-8c06-5349d769e237"),
                            StartTime = new DateTime(2025, 6, 7, 10, 0, 0, 0, DateTimeKind.Utc),
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorCertification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertificationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IssuingOrganization")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("MentorApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MentorApplicationId");

                    b.ToTable("MentorCertification");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorEducation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("GraduationYear")
                        .HasColumnType("int");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("MentorApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MentorApplicationId");

                    b.ToTable("MentorEducation");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorTeachingApproach", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeachingApproachId")
                        .HasColumnType("int");

                    b.HasKey("UserProfileId", "TeachingApproachId");

                    b.HasIndex("TeachingApproachId");

                    b.ToTable("MentorTeachingApproach");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorWorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MentorApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MentorApplicationId");

                    b.ToTable("MentorWorkExperience");
                });

            modelBuilder.Entity("Infrastructure.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("DocumentContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResourceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("DocumentContentId")
                        .IsUnique()
                        .HasFilter("[DocumentContentId] IS NOT NULL");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("Infrastructure.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Learner"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mentor"
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.SessionBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AvailabilitySlotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LearnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LearnerMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SessionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilitySlotId");

                    b.HasIndex("LearnerId");

                    b.HasIndex("MentorId");

                    b.HasIndex("SessionTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("SessionBooking");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c4b3461-068e-4a42-8ba0-647fe1ad5a9d"),
                            AvailabilitySlotId = new Guid("f4e2b81e-479a-4b6a-8a4d-08d3e4c8a6b0"),
                            CreatedAt = new DateTime(2025, 5, 28, 10, 0, 0, 0, DateTimeKind.Utc),
                            LearnerId = new Guid("f052ecf6-7646-4fa6-8deb-3e991a1e4e16"),
                            LearnerMessage = "I would like to discuss about C# performance optimization.",
                            MentorId = new Guid("03ea823d-d625-448d-901d-411c5028b769"),
                            SessionTypeId = 3,
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("305d81fd-ad60-4a28-8262-dea62b7aa589"),
                            AvailabilitySlotId = new Guid("1c7b9f0e-9c3a-4b8f-8e6a-1b9e7b1a3b0f"),
                            CreatedAt = new DateTime(2025, 5, 29, 11, 0, 0, 0, DateTimeKind.Utc),
                            LearnerId = new Guid("f052ecf6-7646-4fa6-8deb-3e991a1e4e16"),
                            LearnerMessage = "Please help me review my CV for a junior developer position.",
                            MentorId = new Guid("862b702e-2c59-46f7-8c06-5349d769e237"),
                            SessionTypeId = 3,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.SupportingDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("MentorApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("DocumentContentId")
                        .IsUnique();

                    b.HasIndex("MentorApplicationId");

                    b.ToTable("SupportingDocument");
                });

            modelBuilder.Entity("Infrastructure.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("PasswordResetExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("148b5a81-90d6-476d-9fee-747b834011ee"),
                            CreatedAt = new DateTime(2024, 1, 15, 10, 30, 0, 0, DateTimeKind.Utc),
                            Email = "huynguyen.admin@gmail.com",
                            LastLogin = new DateTime(2024, 5, 25, 10, 30, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "4CojI/ZvEQrJoJShTol0qRKe7e2405PVU3hFGnrjR0aDrWVa3D7eNC3WhLJkK26I",
                            RoleId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("237e3ce5-ccde-4d3b-aaa7-02866073d526"),
                            CreatedAt = new DateTime(2024, 1, 16, 11, 0, 0, 0, DateTimeKind.Utc),
                            Email = "huykhuong.admin@gmail.com",
                            LastLogin = new DateTime(2024, 5, 26, 11, 0, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "/+9ouySHkK9R7JdK3pa7U54juoLGcDiqYx2POg1X3bZLkBvw0FVDzkFMUD+Vmc+E",
                            RoleId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("00a063ca-1414-4425-bf4e-6d48abf2474a"),
                            CreatedAt = new DateTime(2024, 1, 17, 14, 20, 0, 0, DateTimeKind.Utc),
                            Email = "minhchau.admin@gmail.com",
                            LastLogin = new DateTime(2024, 5, 27, 14, 20, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "7ZpVU6DoVE+e0Op1dI8PIvL4VVOQimwEZdUZskBB0plT1CmAP/y+SRsT9WSZudW8",
                            RoleId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("dac43f2d-8e9b-45ee-b539-e6bc25901812"),
                            CreatedAt = new DateTime(2024, 2, 10, 9, 5, 0, 0, DateTimeKind.Utc),
                            Email = "huynguyen.learner@gmail.com",
                            LastLogin = new DateTime(2024, 5, 20, 9, 5, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "B/Rx/lR+MNs1oWANBFYVwZXSd2hFKDhpk0By7MEg7K3ecpz9LwQBZiUv07/TkqVu",
                            RoleId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("f052ecf6-7646-4fa6-8deb-3e991a1e4e16"),
                            CreatedAt = new DateTime(2024, 2, 12, 16, 30, 0, 0, DateTimeKind.Utc),
                            Email = "huykhuong.learner@gmail.com",
                            LastLogin = new DateTime(2024, 5, 21, 16, 30, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "odpdHFLV8lFXrpiHJJtYd0npiynudyI824s0lciPT5yBap7SDcMWGHCmAXoPtRyi",
                            RoleId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = new Guid("f75ff929-94dd-4d03-b1dd-c0f75e70df10"),
                            CreatedAt = new DateTime(2024, 2, 18, 17, 0, 0, 0, DateTimeKind.Utc),
                            Email = "minhchau.learner@gmail.com",
                            LastLogin = new DateTime(2024, 5, 19, 17, 0, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "d9G9m3ndZwGLV5ciCqHMDRGslR0k1znhgJiPFvN33VyVNYSIeREzLj9Qgtk4m4TT",
                            RoleId = 2,
                            StatusId = 3
                        },
                        new
                        {
                            Id = new Guid("03ea823d-d625-448d-901d-411c5028b769"),
                            CreatedAt = new DateTime(2024, 3, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "huynguyen.mentor@gmail.com",
                            LastLogin = new DateTime(2024, 5, 28, 9, 0, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "ZKZIjsIEcJZT88GTD+nT3l+vwBZH/mla4b5WiSYufGWiOAbvBqnoRNZQjM6qsaqq",
                            RoleId = 3,
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("b1c97b14-fc84-4db5-899d-ae4a38996b56"),
                            CreatedAt = new DateTime(2024, 3, 5, 11, 20, 0, 0, DateTimeKind.Utc),
                            Email = "huykhuong.mentor@gmail.com",
                            LastLogin = new DateTime(2024, 5, 27, 11, 20, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "kj0QXVpwv8AjYwrfB+FPVaxCzfziTAXK32tqjdoPoc82UNhIxrkXB+2NSkaAr5AV",
                            RoleId = 3,
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("862b702e-2c59-46f7-8c06-5349d769e237"),
                            CreatedAt = new DateTime(2024, 3, 10, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "minhchau.mentor@gmail.com",
                            LastLogin = new DateTime(2024, 5, 26, 12, 0, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "dhkox+ORaHABdxUb6ihukuIpaSWTQOhgaObuiH3yr7E7WpX+vCJOH1PBlc5RbhQr",
                            RoleId = 3,
                            StatusId = 2
                        },
                        new
                        {
                            Id = new Guid("0dd85da0-9214-419e-aa02-adefac68c264"),
                            CreatedAt = new DateTime(2024, 3, 15, 14, 45, 0, 0, DateTimeKind.Utc),
                            Email = "dancega713@gmail.com",
                            LastLogin = new DateTime(2024, 5, 28, 14, 45, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "r0e+UhrOsii3FlfUcY8OKkdRK1bc5komYpbONiqqJYj6qD78uz9oc+1XH+3IiEZw",
                            RoleId = 2,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.UserAreaOfExpertise", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AreaOfExpertiseId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "AreaOfExpertiseId");

                    b.HasIndex("AreaOfExpertiseId");

                    b.ToTable("UserAreaOfExpertise");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("dac43f2d-8e9b-45ee-b539-e6bc25901812"),
                            AreaOfExpertiseId = 2
                        },
                        new
                        {
                            UserId = new Guid("dac43f2d-8e9b-45ee-b539-e6bc25901812"),
                            AreaOfExpertiseId = 5
                        },
                        new
                        {
                            UserId = new Guid("f052ecf6-7646-4fa6-8deb-3e991a1e4e16"),
                            AreaOfExpertiseId = 3
                        },
                        new
                        {
                            UserId = new Guid("f052ecf6-7646-4fa6-8deb-3e991a1e4e16"),
                            AreaOfExpertiseId = 4
                        },
                        new
                        {
                            UserId = new Guid("f75ff929-94dd-4d03-b1dd-c0f75e70df10"),
                            AreaOfExpertiseId = 5
                        },
                        new
                        {
                            UserId = new Guid("0dd85da0-9214-419e-aa02-adefac68c264"),
                            AreaOfExpertiseId = 2
                        },
                        new
                        {
                            UserId = new Guid("03ea823d-d625-448d-901d-411c5028b769"),
                            AreaOfExpertiseId = 1
                        },
                        new
                        {
                            UserId = new Guid("03ea823d-d625-448d-901d-411c5028b769"),
                            AreaOfExpertiseId = 7
                        },
                        new
                        {
                            UserId = new Guid("b1c97b14-fc84-4db5-899d-ae4a38996b56"),
                            AreaOfExpertiseId = 2
                        },
                        new
                        {
                            UserId = new Guid("b1c97b14-fc84-4db5-899d-ae4a38996b56"),
                            AreaOfExpertiseId = 8
                        },
                        new
                        {
                            UserId = new Guid("862b702e-2c59-46f7-8c06-5349d769e237"),
                            AreaOfExpertiseId = 3
                        },
                        new
                        {
                            UserId = new Guid("862b702e-2c59-46f7-8c06-5349d769e237"),
                            AreaOfExpertiseId = 6
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.UserCommunicationMethod", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CommunicationMethodId")
                        .HasColumnType("int");

                    b.HasKey("UserProfileId", "CommunicationMethodId");

                    b.HasIndex("CommunicationMethodId");

                    b.ToTable("UserCommunicationMethod");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserLearningStyle", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LearningStyleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "LearningStyleId");

                    b.HasIndex("LearningStyleId");

                    b.ToTable("UserLearningStyle");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IndustryExperience")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("MessagePermission")
                        .HasColumnType("bit");

                    b.Property<bool?>("NotificationsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PhotoData")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("PrivacyProfile")
                        .HasColumnType("bit");

                    b.Property<string>("ProfessionalSkill")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("SessionDurationId")
                        .HasColumnType("int");

                    b.Property<int?>("SessionFrequencyId")
                        .HasColumnType("int");

                    b.Property<string>("UserGoal")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("SessionDurationId");

                    b.HasIndex("SessionFrequencyId");

                    b.ToTable("UserProfile");

                    b.HasData(
                        new
                        {
                            Id = new Guid("148b5a81-90d6-476d-9fee-747b834011ee"),
                            Bio = "Experienced tech administrator with background in education platforms.",
                            FullName = "Huy Nguyen Admin",
                            IndustryExperience = "Experienced in education platforms, with expertise in system administration, DevOps, and cloud infrastructure.",
                            MessagePermission = true,
                            NotificationsEnabled = true,
                            PrivacyProfile = true,
                            ProfessionalSkill = "System administration, DevOps, Cloud infrastructure",
                            SessionDurationId = 3,
                            SessionFrequencyId = 4
                        },
                        new
                        {
                            Id = new Guid("237e3ce5-ccde-4d3b-aaa7-02866073d526"),
                            Bio = "Platform administrator with focus on user experience and system reliability.",
                            FullName = "Huy Khuong Admin",
                            IndustryExperience = "Experienced in user experience and system reliability, with expertise in user management, technical support, and data analytics.",
                            MessagePermission = true,
                            NotificationsEnabled = true,
                            PrivacyProfile = true,
                            ProfessionalSkill = "User management, Technical support, Data analytics",
                            SessionDurationId = 3,
                            SessionFrequencyId = 4
                        },
                        new
                        {
                            Id = new Guid("00a063ca-1414-4425-bf4e-6d48abf2474a"),
                            Bio = "Senior administrator overseeing platform development and technical operations.",
                            FullName = "Minh Chau Admin",
                            IndustryExperience = "Experienced in project management, system architecture, and team leadership, with expertise in platform development and technical operations.",
                            MessagePermission = true,
                            NotificationsEnabled = true,
                            PrivacyProfile = true,
                            ProfessionalSkill = "Project management, System architecture, Team leadership",
                            SessionDurationId = 3,
                            SessionFrequencyId = 4
                        },
                        new
                        {
                            Id = new Guid("dac43f2d-8e9b-45ee-b539-e6bc25901812"),
                            Bio = "Aspiring software developer interested in web technologies and cloud computing.",
                            FullName = "Huy Nguyen Learner",
                            IndustryExperience = "Aspiring software developer interested in web technologies and cloud computing, with expertise in web development, cloud computing, and problem-solving.",
                            MessagePermission = true,
                            NotificationsEnabled = true,
                            PrivacyProfile = true,
                            ProfessionalSkill = "Web development, Cloud computing, Problem-solving",
                            SessionDurationId = 2,
                            SessionFrequencyId = 1,
                            UserGoal = "To master modern web development frameworks and secure a developer position."
                        },
                        new
                        {
                            Id = new Guid("f052ecf6-7646-4fa6-8deb-3e991a1e4e16"),
                            Bio = "Data science enthusiast with background in statistics and mathematics.",
                            FullName = "Huy Khuong Learner",
                            IndustryExperience = "Data science enthusiast with background in statistics and mathematics, with expertise in machine learning algorithms and data visualization.",
                            MessagePermission = true,
                            NotificationsEnabled = true,
                            PrivacyProfile = false,
                            ProfessionalSkill = "Statistics, Mathematics, Machine learning",
                            SessionDurationId = 3,
                            SessionFrequencyId = 2,
                            UserGoal = "To develop expertise in machine learning algorithms and data visualization."
                        },
                        new
                        {
                            Id = new Guid("f75ff929-94dd-4d03-b1dd-c0f75e70df10"),
                            Bio = "UX/UI designer looking to expand skills in frontend development.",
                            FullName = "Minh Chau Learner",
                            IndustryExperience = "UX/UI designer looking to expand skills in frontend development, with expertise in UX/UI design, frontend development, and problem-solving.",
                            MessagePermission = false,
                            NotificationsEnabled = false,
                            PrivacyProfile = true,
                            ProfessionalSkill = "UX/UI design, Frontend development, Problem-solving",
                            SessionDurationId = 1,
                            SessionFrequencyId = 3,
                            UserGoal = "To combine design expertise with technical implementation skills."
                        },
                        new
                        {
                            Id = new Guid("0dd85da0-9214-419e-aa02-adefac68c264"),
                            Bio = "Full-stack developer with interest in blockchain and distributed systems.",
                            FullName = "Dan Cega",
                            IndustryExperience = "Full-stack developer with interest in blockchain and distributed systems, with expertise in blockchain, distributed systems, and problem-solving.",
                            MessagePermission = true,
                            NotificationsEnabled = true,
                            PrivacyProfile = false,
                            ProfessionalSkill = "Blockchain, Distributed systems, Problem-solving",
                            SessionDurationId = 5,
                            SessionFrequencyId = 1,
                            UserGoal = "To build scalable decentralized applications and smart contracts."
                        },
                        new
                        {
                            Id = new Guid("03ea823d-d625-448d-901d-411c5028b769"),
                            Bio = "Senior software engineer with 8+ years of experience in full-stack development.",
                            FullName = "Huy Nguyen Mentor",
                            IndustryExperience = "Fintech, E-commerce, Enterprise applications",
                            MessagePermission = true,
                            NotificationsEnabled = true,
                            PrivacyProfile = false,
                            ProfessionalSkill = "Java, Spring, React, AWS, DevOps",
                            SessionDurationId = 4,
                            SessionFrequencyId = 2,
                            UserGoal = "To teach a seasoned software engineer and lead younge developers."
                        },
                        new
                        {
                            Id = new Guid("b1c97b14-fc84-4db5-899d-ae4a38996b56"),
                            Bio = "Data scientist specializing in predictive analytics and natural language processing.",
                            FullName = "Huy Khuong Mentor",
                            IndustryExperience = "Healthcare, Research, Marketing analytics",
                            MessagePermission = true,
                            NotificationsEnabled = true,
                            PrivacyProfile = true,
                            ProfessionalSkill = "Python, TensorFlow, PyTorch, NLP, Big Data",
                            SessionDurationId = 3,
                            SessionFrequencyId = 1,
                            UserGoal = "To share knowledge and expertise in data science and machine learning."
                        },
                        new
                        {
                            Id = new Guid("862b702e-2c59-46f7-8c06-5349d769e237"),
                            Bio = "Frontend specialist with expertise in modern JavaScript frameworks and UI/UX principles.",
                            FullName = "Minh Chau Mentor",
                            IndustryExperience = "SaaS products, E-learning platforms, Creative agencies",
                            MessagePermission = true,
                            NotificationsEnabled = false,
                            PrivacyProfile = false,
                            ProfessionalSkill = "React, Vue.js, Angular, SCSS, Accessibility",
                            SessionDurationId = 2,
                            SessionFrequencyId = 4,
                            UserGoal = "To share knowledge and expertise in frontend development and UI/UX design."
                        });
                });

            modelBuilder.Entity("Infrastructure.Entities.UserProfileAvailability", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailabilityId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "AvailabilityId");

                    b.HasIndex("AvailabilityId");

                    b.ToTable("UserProfileAvailability");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserTopicOfInterest", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("UserProfileId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("UserTopicOfInterest");
                });

            modelBuilder.Entity("Infrastructure.Entities.Category", b =>
                {
                    b.HasOne("Infrastructure.Entities.Enum.CategoryStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Infrastructure.Entities.Course", b =>
                {
                    b.HasOne("Infrastructure.Entities.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Enum.CourseLevel", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Enum.CourseStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.User", null)
                        .WithMany("MentoredCourses")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("Level");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorApplication", b =>
                {
                    b.HasOne("Infrastructure.Entities.User", "AdminReviewer")
                        .WithOne("ReviewedMentorApplication")
                        .HasForeignKey("Infrastructure.Entities.MentorApplication", "AdminReviewerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Infrastructure.Entities.User", "Applicant")
                        .WithOne("SubmittedMentorApplication")
                        .HasForeignKey("Infrastructure.Entities.MentorApplication", "ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Enum.ApplicationStatus", "ApplicationStatus")
                        .WithMany("MentorApplications")
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdminReviewer");

                    b.Navigation("Applicant");

                    b.Navigation("ApplicationStatus");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorAvailabilitySlot", b =>
                {
                    b.HasOne("Infrastructure.Entities.User", "Mentor")
                        .WithMany("CreatedAvailabilitySlots")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Enum.SessionAvailabilityStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorCertification", b =>
                {
                    b.HasOne("Infrastructure.Entities.MentorApplication", "MentorApplication")
                        .WithMany("MentorCertifications")
                        .HasForeignKey("MentorApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentorApplication");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorEducation", b =>
                {
                    b.HasOne("Infrastructure.Entities.MentorApplication", "MentorApplication")
                        .WithMany("MentorEducations")
                        .HasForeignKey("MentorApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentorApplication");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorTeachingApproach", b =>
                {
                    b.HasOne("Infrastructure.Entities.Enum.TeachingApproach", "TeachingApproach")
                        .WithMany()
                        .HasForeignKey("TeachingApproachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.UserProfile", "UserProfile")
                        .WithMany("TeachingApproaches")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeachingApproach");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorWorkExperience", b =>
                {
                    b.HasOne("Infrastructure.Entities.MentorApplication", "MentorApplication")
                        .WithMany("MentorWorkExperiences")
                        .HasForeignKey("MentorApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentorApplication");
                });

            modelBuilder.Entity("Infrastructure.Entities.Resource", b =>
                {
                    b.HasOne("Infrastructure.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("Infrastructure.Entities.DocumentContent", "DocumentContent")
                        .WithOne("Resource")
                        .HasForeignKey("Infrastructure.Entities.Resource", "DocumentContentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Course");

                    b.Navigation("DocumentContent");
                });

            modelBuilder.Entity("Infrastructure.Entities.SessionBooking", b =>
                {
                    b.HasOne("Infrastructure.Entities.MentorAvailabilitySlot", "AvailabilitySlot")
                        .WithMany("SessionBookings")
                        .HasForeignKey("AvailabilitySlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.User", "Learner")
                        .WithMany("LearnerSessions")
                        .HasForeignKey("LearnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.User", "Mentor")
                        .WithMany("MentorSessions")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Enum.SessionType", "SessionType")
                        .WithMany()
                        .HasForeignKey("SessionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Enum.SessionBookingStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AvailabilitySlot");

                    b.Navigation("Learner");

                    b.Navigation("Mentor");

                    b.Navigation("SessionType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Infrastructure.Entities.SupportingDocument", b =>
                {
                    b.HasOne("Infrastructure.Entities.DocumentContent", "DocumentContent")
                        .WithOne("SupportingDocument")
                        .HasForeignKey("Infrastructure.Entities.SupportingDocument", "DocumentContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.MentorApplication", "MentorApplication")
                        .WithMany("SupportingDocuments")
                        .HasForeignKey("MentorApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DocumentContent");

                    b.Navigation("MentorApplication");
                });

            modelBuilder.Entity("Infrastructure.Entities.User", b =>
                {
                    b.HasOne("Infrastructure.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Enum.UserStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserAreaOfExpertise", b =>
                {
                    b.HasOne("Infrastructure.Entities.Enum.AreaOfExpertise", "AreaOfExpertise")
                        .WithMany()
                        .HasForeignKey("AreaOfExpertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.User", "User")
                        .WithMany("UserAreaOfExpertises")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaOfExpertise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserCommunicationMethod", b =>
                {
                    b.HasOne("Infrastructure.Entities.Enum.CommunicationMethod", "CommunicationMethod")
                        .WithMany()
                        .HasForeignKey("CommunicationMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.UserProfile", "UserProfile")
                        .WithMany("UserCommunicationMethods")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunicationMethod");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserLearningStyle", b =>
                {
                    b.HasOne("Infrastructure.Entities.Enum.LearningStyle", "LearningStyle")
                        .WithMany()
                        .HasForeignKey("LearningStyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.UserProfile", "User")
                        .WithMany("UserLearningStyles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LearningStyle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserProfile", b =>
                {
                    b.HasOne("Infrastructure.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Infrastructure.Entities.UserProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.Enum.SessionDuration", "SessionDuration")
                        .WithMany()
                        .HasForeignKey("SessionDurationId");

                    b.HasOne("Infrastructure.Entities.Enum.SessionFrequency", "SessionFrequency")
                        .WithMany()
                        .HasForeignKey("SessionFrequencyId");

                    b.Navigation("SessionDuration");

                    b.Navigation("SessionFrequency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserProfileAvailability", b =>
                {
                    b.HasOne("Infrastructure.Entities.Enum.Availability", "Availability")
                        .WithMany()
                        .HasForeignKey("AvailabilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.UserProfile", "UserProfile")
                        .WithMany("UserProfileAvailabilities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Availability");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Infrastructure.Entities.UserTopicOfInterest", b =>
                {
                    b.HasOne("Infrastructure.Entities.Enum.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Entities.UserProfile", "UserProfile")
                        .WithMany("UserTopicOfInterests")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Infrastructure.Entities.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Infrastructure.Entities.DocumentContent", b =>
                {
                    b.Navigation("Resource");

                    b.Navigation("SupportingDocument");
                });

            modelBuilder.Entity("Infrastructure.Entities.Enum.ApplicationStatus", b =>
                {
                    b.Navigation("MentorApplications");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorApplication", b =>
                {
                    b.Navigation("MentorCertifications");

                    b.Navigation("MentorEducations");

                    b.Navigation("MentorWorkExperiences");

                    b.Navigation("SupportingDocuments");
                });

            modelBuilder.Entity("Infrastructure.Entities.MentorAvailabilitySlot", b =>
                {
                    b.Navigation("SessionBookings");
                });

            modelBuilder.Entity("Infrastructure.Entities.User", b =>
                {
                    b.Navigation("CreatedAvailabilitySlots");

                    b.Navigation("LearnerSessions");

                    b.Navigation("MentorSessions");

                    b.Navigation("MentoredCourses");

                    b.Navigation("ReviewedMentorApplication")
                        .IsRequired();

                    b.Navigation("SubmittedMentorApplication")
                        .IsRequired();

                    b.Navigation("UserAreaOfExpertises");

                    b.Navigation("UserProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Entities.UserProfile", b =>
                {
                    b.Navigation("TeachingApproaches");

                    b.Navigation("UserCommunicationMethods");

                    b.Navigation("UserLearningStyles");

                    b.Navigation("UserProfileAvailabilities");

                    b.Navigation("UserTopicOfInterests");
                });
#pragma warning restore 612, 618
        }
    }
}
